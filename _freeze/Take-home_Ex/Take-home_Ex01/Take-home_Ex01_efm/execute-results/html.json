{
  "hash": "7728c005d6eacf6e257e53c7ce6450de",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Take Home Exercise 01 (Work in Progress...)\"\nauthor: \"Ee Fook Ming\"\ndate: \"February 8, 2025\"\ndate-modified: last-modified\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n  code-fold: true\n  code-summary: \"Click to Show Code\"\nformat: \n  html:\n    number-sections: true\n    number-depth: 3\n#    number-offset: [12, 0]  # Offset heading levels by starting at 13\noutput: \n  html_document: \n    toc: true\n    tabset: true\n---\n\n\n\n\n\n[Overview and Background: Ship Performance in the Gulf of Guinea (Work in Progress...)]{style=\"font-size: 44px; font-weight: bold;\"}\n\n# Introduction\n\nThe maritime industry is a cornerstone of global trade, ensuring the smooth transportation of goods across continents. The efficient performance of ships is crucial to optimizing fuel consumption, minimizing operational costs, and maximizing revenue. This assignment explores ship performance trends using the Ship Performance Clustering Dataset, focusing on ships operating in the Gulf of Guinea—a vital maritime region known for its economic and strategic importance.\n\nBy analyzing ship performance metrics such as speed, efficiency, operational cost, and revenue, we aim to uncover insights that can enhance operational decision-making. This study employs data visualization techniques to identify key patterns, trends, and potential optimizations in ship performance.\n\n![](images/clipboard-4268411684.png)\n\n# Background and Content\n\n## Maritime Significance of the Gulf of Guinea\n\nThe Gulf of Guinea serves as a major maritime trade route, connecting West Africa to global markets. The region hosts various types of commercial ships, including tankers, container ships, and bulk carriers, each operating under different economic and environmental conditions. Given the challenges posed by fuel costs, maintenance, and weather conditions, shipowners and operators constantly seek ways to improve efficiency while reducing operational expenses.\n\n## Data Overview\n\nThe dataset used in this study is a synthetic but realistic representation of maritime operations. The key attributes include:\n\n-   Speed Over Ground (knots)\n-   Distance Traveled (nautical miles)\n-   Engine Power (kW)\n-   Operational Cost (USD)\n-   Revenue per Voyage (USD)\n-   Efficiency (nautical miles per kilowatt-hour)\n-   Ship Type, Route Type, Engine Type, and Maintenance Status\n\nThis dataset provides a rich foundation for exploratory data analysis (EDA), clustering analysis, and performance optimization.\n\n### Understanding the Dataset\n\nThis dataset consists of 2736 rows and 24 columns, categorized into numerical and categorical features. Key attributes include: Numerical Features:\n\n-   Speed_Over_Ground_knots – Ship speed over water (knots)\n-   Engine_Power_kW – Engine power output (kilowatts)\n-   Distance_Traveled_nm – Distance traveled per voyage (nautical miles)\n-   Operational_Cost_USD – Cost per voyage (USD)\n-   Revenue_per_Voyage_USD – Revenue per voyage (USD)\n-   Efficiency_nm_per_kWh – Energy efficiency (nautical miles per kilowatt-hour)\n\nCategorical Features:\n\n-   Ship_Type (e.g., Tanker, Container Ship, Bulk Carrier)\n-   Route_Type (e.g., Short-haul, Long-haul, Transoceanic)\n-   Engine_Type (e.g., Diesel, Heavy Fuel Oil)\n-   Maintenance_Status (e.g., Fair, Critical, Good)\n-   Weather_Condition (e.g., Calm, Moderate, Rough)\n\n# Load & Explore the Dataset\n\n-   Loading the required libraries\n-   Loading the dataset into R.\n-   Checking the structure (columns, data types).\n-   Identifying missing values and duplicates.\n\n## Loading Libraries\n\n## Essential R Packages for Data Science and Visualization\n\nThis document provides an overview of essential R packages commonly used for data science, data visualization, and dynamic reporting.\n\n### Core Data Science Libraries\n\n-   [**tidyverse**](https://www.tidyverse.org/): A collection of integrated packages designed for modern data science workflows, including data import, tidying, transformation, visualization, and modeling.\n-   [**haven**](https://haven.tidyverse.org/): Enables R to read and write data stored in SAS, SPSS, and Stata formats, ensuring seamless interoperability with statistical software.\n-   [**knitr**](https://yihui.org/knitr/): Facilitates dynamic report generation, allowing users to embed R code in markdown and generate high-quality documents.\n\n### Visualization Enhancements for ggplot2\n\n-   [**patchwork**](https://patchwork.data-imaginist.com/): Simplifies the arrangement of multiple ggplot2-based visualizations into composite figures for improved storytelling.\n-   [**ggthemes**](https://jrnold.github.io/ggthemes/): Provides additional themes, scales, and geoms to enhance the appearance of ggplot2 visualizations.\n-   [**scales**](https://scales.r-lib.org/): Supports improved data labeling, annotation, and scale transformations for ggplot2.\n-   [**ggridges**](https://wilkelab.org/ggridges/): Enables the creation of ridgeline plots, useful for visualizing distribution changes over time or across categories.\n-   [**ggpubr**](https://rpkgs.datanovia.com/ggpubr/): Provides functions for creating publication-ready plots with minimal effort.\n-   [**gganimate**](https://gganimate.com/): Extends ggplot2 to include animation, making it possible to visualize dynamic data over time.\n-   [**ggdist**](https://mjskay.github.io/ggdist/): Offers enhanced tools for visualizing statistical distributions and uncertainties in data.\n-   [**ggtext**](https://wilkelab.org/ggtext/): Enhances text rendering and formatting in ggplot2 visualizations.\n-   [**ggalt**](https://github.com/hrbrmstr/ggalt): A collection of additional geoms, coordinates, and statistics that extend ggplot2 capabilities.\n-   [**ggextra**](https://cran.r-project.org/package=ggExtra): Adds marginal plots and supplementary visual elements to ggplot2 graphics.\n-   [**cowplot**](https://wilkelab.org/cowplot/): Provides tools for creating publication-quality figures, including alignment functions and themes for consistent presentation.\n-   [**ggnewscale**](https://github.com/eliocamp/ggnewscale): Allows the definition of multiple independent scales within a single ggplot2 visualization, useful for complex multivariate plots.\n\nLoading the libraries using pacman package.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\npacman::p_load(tidyverse, \n               ggplot2, \n               skimr,  # For data summary \n               janitor, # For cleaning column names\n               knitr)\n```\n:::\n\n\n\n\n\n## Load & Inspect Data\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nship_data <- read.csv(\"data/Ship_Performance_Dataset.csv\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Clean column names\n# ship_data <- clean_names(ship_data)\n\n# Check structure\nglimpse(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,736\nColumns: 18\n$ Date                    <chr> \"2023-06-04\", \"2023-06-11\", \"2023-06-18\", \"202…\n$ Ship_Type               <chr> \"Container Ship\", \"Fish Carrier\", \"Container S…\n$ Route_Type              <chr> \"None\", \"Short-haul\", \"Long-haul\", \"Transocean…\n$ Engine_Type             <chr> \"Heavy Fuel Oil (HFO)\", \"Steam Turbine\", \"Dies…\n$ Maintenance_Status      <chr> \"Critical\", \"Good\", \"Fair\", \"Fair\", \"Fair\", \"F…\n$ Speed_Over_Ground_knots <dbl> 12.59756, 10.38758, 20.74975, 21.05510, 13.742…\n$ Engine_Power_kW         <dbl> 2062.9840, 1796.0574, 1648.5567, 915.2618, 108…\n$ Distance_Traveled_nm    <dbl> 1030.9436, 1060.4864, 658.8741, 1126.8225, 144…\n$ Draft_meters            <dbl> 14.132284, 14.653083, 7.199261, 11.789063, 9.7…\n$ Weather_Condition       <chr> \"Moderate\", \"Rough\", \"Moderate\", \"Moderate\", \"…\n$ Cargo_Weight_tons       <dbl> 1959.0179, 162.3947, 178.0409, 1737.3853, 260.…\n$ Operational_Cost_USD    <dbl> 483832.35, 483388.00, 448543.40, 261349.61, 28…\n$ Revenue_per_Voyage_USD  <dbl> 292183.27, 883765.79, 394018.75, 87551.38, 676…\n$ Turnaround_Time_hours   <dbl> 25.86708, 63.24820, 49.41815, 22.40911, 64.158…\n$ Efficiency_nm_per_kWh   <dbl> 1.4551789, 0.2903614, 0.4995945, 0.7029057, 1.…\n$ Seasonal_Impact_Score   <dbl> 1.4156533, 0.8856478, 1.4058132, 1.3707043, 0.…\n$ Weekly_Voyage_Count     <int> 1, 6, 9, 1, 8, 7, 3, 6, 8, 2, 9, 4, 3, 7, 7, 3…\n$ Average_Load_Percentage <dbl> 93.76925, 93.89537, 96.21824, 66.19370, 80.008…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Summary statistics\nskim(ship_data)\n```\n\n::: {.cell-output-display}\n\nTable: Data summary\n\n|                         |          |\n|:------------------------|:---------|\n|Name                     |ship_data |\n|Number of rows           |2736      |\n|Number of columns        |18        |\n|_______________________  |          |\n|Column type frequency:   |          |\n|character                |6         |\n|numeric                  |12        |\n|________________________ |          |\n|Group variables          |None      |\n\n\n**Variable type: character**\n\n|skim_variable      | n_missing| complete_rate| min| max| empty| n_unique| whitespace|\n|:------------------|---------:|-------------:|---:|---:|-----:|--------:|----------:|\n|Date               |         0|             1|  10|  10|     0|       57|          0|\n|Ship_Type          |         0|             1|   4|  14|     0|        5|          0|\n|Route_Type         |         0|             1|   4|  12|     0|        5|          0|\n|Engine_Type        |         0|             1|   4|  20|     0|        4|          0|\n|Maintenance_Status |         0|             1|   4|   8|     0|        4|          0|\n|Weather_Condition  |         0|             1|   4|   8|     0|        4|          0|\n\n\n**Variable type: numeric**\n\n|skim_variable           | n_missing| complete_rate|      mean|        sd|       p0|       p25|       p50|       p75|      p100|hist  |\n|:-----------------------|---------:|-------------:|---------:|---------:|--------:|---------:|---------:|---------:|---------:|:-----|\n|Speed_Over_Ground_knots |         0|             1|     17.60|      4.31|    10.01|     13.93|     17.71|     21.28|     25.00|▇▇▇▇▇ |\n|Engine_Power_kW         |         0|             1|   1757.61|    717.00|   501.03|   1148.10|   1757.49|   2382.59|   2998.73|▇▇▇▇▇ |\n|Distance_Traveled_nm    |         0|             1|   1036.41|    568.63|    50.43|    548.51|   1037.82|   1540.93|   1998.34|▇▇▇▇▇ |\n|Draft_meters            |         0|             1|      9.93|      2.88|     5.00|      7.44|      9.92|     12.41|     14.99|▇▇▇▇▇ |\n|Cargo_Weight_tons       |         0|             1|   1032.57|    558.70|    50.23|    553.98|   1043.21|   1527.72|   1999.13|▇▇▇▇▇ |\n|Operational_Cost_USD    |         0|             1| 255143.34| 140890.48| 10092.31| 131293.38| 257157.65| 381796.93| 499734.87|▇▇▇▇▇ |\n|Revenue_per_Voyage_USD  |         0|             1| 521362.06| 271211.63| 50351.81| 290346.39| 520176.93| 750072.79| 999916.70|▇▇▇▇▇ |\n|Turnaround_Time_hours   |         0|             1|     41.75|     17.63|    12.02|     26.17|     41.59|     57.36|     71.97|▇▇▇▇▇ |\n|Efficiency_nm_per_kWh   |         0|             1|      0.80|      0.40|     0.10|      0.46|      0.79|      1.15|      1.50|▇▇▇▇▇ |\n|Seasonal_Impact_Score   |         0|             1|      1.00|      0.29|     0.50|      0.76|      1.01|      1.25|      1.50|▇▇▇▇▇ |\n|Weekly_Voyage_Count     |         0|             1|      4.91|      2.60|     1.00|      3.00|      5.00|      7.00|      9.00|▇▇▃▇▇ |\n|Average_Load_Percentage |         0|             1|     75.22|     14.51|    50.01|     62.70|     75.50|     87.72|    100.00|▇▇▇▇▇ |\n\n\n:::\n\n```{.r .cell-code}\n# Check for missing values\ncolSums(is.na(ship_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                   Date               Ship_Type              Route_Type \n                      0                       0                       0 \n            Engine_Type      Maintenance_Status Speed_Over_Ground_knots \n                      0                       0                       0 \n        Engine_Power_kW    Distance_Traveled_nm            Draft_meters \n                      0                       0                       0 \n      Weather_Condition       Cargo_Weight_tons    Operational_Cost_USD \n                      0                       0                       0 \n Revenue_per_Voyage_USD   Turnaround_Time_hours   Efficiency_nm_per_kWh \n                      0                       0                       0 \n  Seasonal_Impact_Score     Weekly_Voyage_Count Average_Load_Percentage \n                      0                       0                       0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Check for duplicates\nsum(duplicated(ship_data))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n### Examine Unique Values in Categorical Variables\n\n- Automatically selects categorical variables (columns that are either character or factor types).\n- Prints out the column name in a formatted header.\n- Lists all unique values within each categorical column.\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to print unique values of categorical variables\n\nprint_categorical_values <- function(data) {\n  cat(\"### Categorical Variables and Their Unique Values\\n\\n\")\n  \n  \n  # Identify columns with date-like values (YYYY-MM-DD format) and date class\n  date_columns <- names(data)[sapply(data, function(col) {\n    is_date <- inherits(col, \"Date\") || inherits(col, \"POSIXt\")  # Check if it's a date class\n    is_formatted_date <- all(grepl(\"^\\\\d{4}-\\\\d{2}-\\\\d{2}$\", na.omit(as.character(col))))  # Check string format\n    return(is_date | is_formatted_date)\n  })]\n\n  \n  # Select categorical columns, excluding detected date columns\n  categorical_vars <- data %>%\n    select(where(~ is.character(.) | is.factor(.))) %>%\n    select(-any_of(date_columns))  # Remove detected date columns\n  \n  if (ncol(categorical_vars) == 0) {\n    cat(\"No categorical variables found in the dataset.\\n\")\n    return()\n  }\n  \n  for (col in colnames(categorical_vars)) {\n    unique_values <- unique(categorical_vars[[col]])\n    \n    # Remove \"None\" if it appears as a category\n    unique_values <- unique_values[unique_values != \"None\"]\n    \n    cat(\"####\", col, \"\\n\")\n    cat(\"Unique values:\", paste(unique_values, collapse = \", \"), \"\\n\\n\")\n  }\n}\n\n# Run the function\nprint_categorical_values(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n### Categorical Variables and Their Unique Values\n\n#### Ship_Type \nUnique values: Container Ship, Fish Carrier, Bulk Carrier, Tanker \n\n#### Route_Type \nUnique values: Short-haul, Long-haul, Transoceanic, Coastal \n\n#### Engine_Type \nUnique values: Heavy Fuel Oil (HFO), Steam Turbine, Diesel \n\n#### Maintenance_Status \nUnique values: Critical, Good, Fair \n\n#### Weather_Condition \nUnique values: Moderate, Rough, Calm \n```\n\n\n:::\n:::\n\n\n\n\n\n### Count Rows with None\n\nThe code chunk counts the number of rows in your dataset based on how many \"None\" values they contain. It categorizes rows into:\n\n- 1x \"None\"\n- 2x \"None\"\n- 3x \"None\"\n- More than 3x \"None\"\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Function to count and display rows based on the number of \"None\" occurrences\ncount_none_rows <- function(data) {\n  # Count the number of \"None\" values in each row\n  none_counts <- rowSums(data == \"None\", na.rm = TRUE)\n  \n  # Count how many rows fall into each category\n  none_summary <- data.frame(\n    \"Category\" = c(\"1x None\", \"2x None\", \"3x None\", \">3x None\"),\n    \"Count\" = c(\n      sum(none_counts == 1),\n      sum(none_counts == 2),\n      sum(none_counts == 3),\n      sum(none_counts > 3)\n    )\n  )\n  \n  # Display summary\n  print(none_summary)\n  \n  # Display sample rows for each category\n  for (i in 1:4) {\n    cat(\"\\n### Sample Rows for\", none_summary$Category[i], \"\\n\")\n    sample_rows <- data[none_counts == i, ]\n    if (nrow(sample_rows) > 0) {\n      print(head(sample_rows, 5))  # Show only first 5 rows for clarity\n    } else {\n      cat(\"No rows found in this category.\\n\")\n    }\n  }\n  \n}\n\n# Run the function\ncount_none_rows(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  Category Count\n1  1x None   540\n2  2x None    68\n3  3x None     0\n4 >3x None     1\n\n### Sample Rows for 1x None \n         Date      Ship_Type Route_Type          Engine_Type Maintenance_Status\n1  2023-06-04 Container Ship       None Heavy Fuel Oil (HFO)           Critical\n9  2023-07-30           None    Coastal Heavy Fuel Oil (HFO)               Good\n16 2023-09-17         Tanker  Long-haul                 None               Good\n21 2023-10-22 Container Ship       None               Diesel           Critical\n22 2023-10-29   Bulk Carrier Short-haul               Diesel               None\n   Speed_Over_Ground_knots Engine_Power_kW Distance_Traveled_nm Draft_meters\n1                 12.59756       2062.9840            1030.9436    14.132284\n9                 17.30936       1179.0188             429.5643     6.002358\n16                15.08722        578.8929            1932.2131    12.998270\n21                23.80385       1120.6992            1169.4785    10.544799\n22                22.76036       2335.2629            1461.9175     7.980762\n   Weather_Condition Cargo_Weight_tons Operational_Cost_USD\n1           Moderate         1959.0179             483832.4\n9           Moderate         1953.4479             346071.5\n16             Rough          403.8543             424860.6\n21             Rough         1084.2556             377335.2\n22              Calm         1100.9686             441952.1\n   Revenue_per_Voyage_USD Turnaround_Time_hours Efficiency_nm_per_kWh\n1                292183.3              25.86708             1.4551789\n9                448682.9              14.45182             0.9774483\n16               633712.5              68.22836             0.6526741\n21               371301.2              57.59360             1.2623670\n22               666766.9              35.56856             1.0500736\n   Seasonal_Impact_Score Weekly_Voyage_Count Average_Load_Percentage\n1              1.4156533                   1                93.76925\n9              0.7649141                   8                50.24706\n16             1.3086865                   3                74.51022\n21             1.4179010                   8                83.44323\n22             0.8750325                   6                92.18716\n\n### Sample Rows for 2x None \n          Date    Ship_Type Route_Type   Engine_Type Maintenance_Status\n43  2024-03-24       Tanker       None Steam Turbine           Critical\n129 2023-09-10 Bulk Carrier    Coastal Steam Turbine               None\n135 2023-10-22         None  Long-haul        Diesel               None\n199 2023-12-10         None    Coastal          None               Fair\n219 2024-04-28 Bulk Carrier    Coastal          None               None\n    Speed_Over_Ground_knots Engine_Power_kW Distance_Traveled_nm Draft_meters\n43                 19.08942       1095.2398            1801.1749     14.08673\n129                22.70870       1512.1199             771.3406      9.85436\n135                14.64564       2605.7648            1714.8680     11.43451\n199                12.25630        568.2896             495.4977     11.85982\n219                10.36508       1195.3456             247.0565     12.56096\n    Weather_Condition Cargo_Weight_tons Operational_Cost_USD\n43               None          858.1013             70720.33\n129              None         1580.1024            226899.21\n135          Moderate          682.6991            439967.19\n199              Calm          983.0555             28916.94\n219             Rough         1098.1778             22233.31\n    Revenue_per_Voyage_USD Turnaround_Time_hours Efficiency_nm_per_kWh\n43               382123.59              66.85377             0.7762076\n129              286758.26              39.56307             0.8514023\n135               51708.41              55.27975             0.5330556\n199               93070.13              16.16368             1.1969162\n219              956502.65              61.08365             0.7352781\n    Seasonal_Impact_Score Weekly_Voyage_Count Average_Load_Percentage\n43              0.7934013                   3                85.87867\n129             0.8086902                   9                90.61944\n135             1.3134256                   3                58.93742\n199             0.7416365                   1                77.79094\n219             1.4287733                   7                64.02880\n\n### Sample Rows for 3x None \nNo rows found in this category.\n\n### Sample Rows for >3x None \n          Date Ship_Type Route_Type Engine_Type Maintenance_Status\n197 2023-11-26      None       None        None               None\n    Speed_Over_Ground_knots Engine_Power_kW Distance_Traveled_nm Draft_meters\n197                11.12406        1493.909             1279.969     11.59002\n    Weather_Condition Cargo_Weight_tons Operational_Cost_USD\n197             Rough          1515.524             317587.4\n    Revenue_per_Voyage_USD Turnaround_Time_hours Efficiency_nm_per_kWh\n197               583011.8              29.87684             0.1989973\n    Seasonal_Impact_Score Weekly_Voyage_Count Average_Load_Percentage\n197             0.9338018                   9                82.86563\n```\n\n\n:::\n:::\n\n\n\n\n\n\n### Count Categorical Columns with None\n\n- Function to count \"None\" values in specified categorical columns\n  - ship_type\n  - route_type\n  - engine_type\n  - maintenance_status\n  - weather_condition\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncount_none_per_column <- function(data, columns) {\n  # Filter dataset to only selected columns\n  data_selected <- data %>% select(all_of(columns))\n  \n  # Count occurrences of \"None\" in each column\n  none_counts <- colSums(data_selected == \"None\", na.rm = TRUE)\n  \n  # Convert to data frame for display\n  df_summary <- data.frame(Column = names(none_counts), Count_None = none_counts)\n  \n  # Display results\n  print(df_summary)\n}\n\n# Define the categorical columns to analyze\ncategorical_columns <- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Maintenance_Status\", \"Weather_Condition\")\n\n# Run the function\ncount_none_per_column(ship_data, categorical_columns)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                               Column Count_None\nShip_Type                   Ship_Type        136\nRoute_Type                 Route_Type        136\nEngine_Type               Engine_Type        136\nMaintenance_Status Maintenance_Status        136\nWeather_Condition   Weather_Condition        136\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Data Cleaning & Wrangling\n\n- Data Cleaning: Identifying and handling missing, duplicate, or inconsistent data.\n- Data Transformation: Converting data types (categorical columns into factors), normalizing values, and reformatting structures to improve usability.\n- Data Reduction: Filtering, aggregating, or summarizing data to focus on relevant information.\n- Data Validation: Ensuring data quality, accuracy, and consistency.\n- Data Integration: Combining data from multiple sources for a comprehensive dataset; where necessary and if required.\n- Feature Engineering: Create additional fields if needed.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Date\"                    \"Ship_Type\"              \n [3] \"Route_Type\"              \"Engine_Type\"            \n [5] \"Maintenance_Status\"      \"Speed_Over_Ground_knots\"\n [7] \"Engine_Power_kW\"         \"Distance_Traveled_nm\"   \n [9] \"Draft_meters\"            \"Weather_Condition\"      \n[11] \"Cargo_Weight_tons\"       \"Operational_Cost_USD\"   \n[13] \"Revenue_per_Voyage_USD\"  \"Turnaround_Time_hours\"  \n[15] \"Efficiency_nm_per_kWh\"   \"Seasonal_Impact_Score\"  \n[17] \"Weekly_Voyage_Count\"     \"Average_Load_Percentage\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncategorical_vars <- c(\"Ship_Type\", \"Route_Type\", \"Engine_Type\", \"Maintenance_Status\", \"Weather_Condition\")\n\n# ship_data[categorical_vars] <- lapply(ship_data[categorical_vars], as.factor)\n# Convert categorical variables to character before filtering\nship_data[categorical_vars] <- lapply(ship_data[categorical_vars], as.character)\n\n# Count rows before any operation\ninitial_rows <- nrow(ship_data)\n\n# Remove duplicates\nship_data <- ship_data %>% distinct()\n\n# Convert all numeric columns to correct format and round them\nship_data <- ship_data %>%\n  mutate(across(where(is.numeric), \\(x) round(x, 0)))  # Fixed across() syntax\n\n# Remove any row with one or more 'None' values in their columns\nship_data <- ship_data %>%\n  filter(if_all(where(is.character), ~ . != \"None\"))\n\n# Remove rows with critical missing values (Revenue, Cost, etc.)\nship_data <- ship_data %>%\n  filter(!is.na(Revenue_per_Voyage_USD) & !is.na(Operational_Cost_USD))\n\n# Count rows after operations\nfinal_rows <- nrow(ship_data)\n\n# Print the number of rows removed\ncat(\"\\nRows before operations:\", initial_rows, \n    \"\\nRows after operations:\", final_rows, \n    \"\\nTotal rows removed:\", initial_rows - final_rows, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nRows before operations: 2736 \nRows after operations: 2127 \nTotal rows removed: 609 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Display cleaned dataset sample\nhead(ship_data, 20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n         Date      Ship_Type   Route_Type          Engine_Type\n1  2023-06-11   Fish Carrier   Short-haul        Steam Turbine\n2  2023-06-18 Container Ship    Long-haul               Diesel\n3  2023-06-25   Bulk Carrier Transoceanic        Steam Turbine\n4  2023-07-02   Fish Carrier Transoceanic               Diesel\n5  2023-07-09   Fish Carrier    Long-haul Heavy Fuel Oil (HFO)\n6  2023-07-16   Fish Carrier Transoceanic Heavy Fuel Oil (HFO)\n7  2023-07-23 Container Ship   Short-haul               Diesel\n8  2023-08-06 Container Ship    Long-haul               Diesel\n9  2023-08-13   Fish Carrier   Short-haul        Steam Turbine\n10 2023-08-20         Tanker Transoceanic               Diesel\n11 2023-08-27 Container Ship   Short-haul        Steam Turbine\n12 2023-09-03   Bulk Carrier    Long-haul Heavy Fuel Oil (HFO)\n13 2023-09-10         Tanker    Long-haul               Diesel\n14 2023-09-24   Bulk Carrier Transoceanic Heavy Fuel Oil (HFO)\n15 2023-10-01         Tanker    Long-haul               Diesel\n16 2023-10-08   Fish Carrier      Coastal               Diesel\n17 2023-10-15   Bulk Carrier    Long-haul               Diesel\n18 2023-11-12 Container Ship      Coastal Heavy Fuel Oil (HFO)\n19 2023-11-26 Container Ship    Long-haul Heavy Fuel Oil (HFO)\n20 2023-12-10   Fish Carrier      Coastal               Diesel\n   Maintenance_Status Speed_Over_Ground_knots Engine_Power_kW\n1                Good                      10            1796\n2                Fair                      21            1649\n3                Fair                      21             915\n4                Fair                      14            1090\n5                Fair                      19            2172\n6            Critical                      20            2505\n7            Critical                      23             815\n8                Fair                      23            2685\n9                Fair                      12            2523\n10               Good                      18            2130\n11               Good                      10            1599\n12               Good                      13            2780\n13               Good                      12            1994\n14           Critical                      21            2526\n15               Good                      15            1930\n16           Critical                      24            1772\n17               Good                      23            1504\n18               Good                      15            1283\n19               Good                      18            1846\n20               Fair                      14            2659\n   Distance_Traveled_nm Draft_meters Weather_Condition Cargo_Weight_tons\n1                  1060           15             Rough               162\n2                   659            7          Moderate               178\n3                  1127           12          Moderate              1737\n4                  1445           10          Moderate               261\n5                   723           15             Rough              1913\n6                   270            8             Rough              1191\n7                  1717            9          Moderate               318\n8                  1589           12              Calm              1843\n9                  1225           11          Moderate              1131\n10                 1312           12             Rough               441\n11                 1500           11          Moderate               389\n12                 1474            8             Rough              1110\n13                 1320           12              Calm               771\n14                 1814           11             Rough              1552\n15                  885            5          Moderate               409\n16                 1062            9              Calm              1694\n17                 1147           13              Calm               700\n18                  713           11          Moderate              1690\n19                 1709           11             Rough              1883\n20                 1800           12          Moderate              1569\n   Operational_Cost_USD Revenue_per_Voyage_USD Turnaround_Time_hours\n1                483388                 883766                    63\n2                448543                 394019                    49\n3                261350                  87551                    22\n4                287718                 676121                    64\n5                184569                 776698                    47\n6                434449                 739432                    29\n7                348381                 462211                    52\n8                149790                 615231                    64\n9                299189                 749335                    48\n10               481866                 738063                    48\n11               481847                 738287                    66\n12                47653                 288286                    25\n13               405464                 511613                    47\n14               270794                 475172                    39\n15               256980                 870358                    54\n16               118689                 285852                    41\n17               415285                 456418                    22\n18               471255                 880436                    26\n19               275323                 137635                    22\n20               355591                 834102                    37\n   Efficiency_nm_per_kWh Seasonal_Impact_Score Weekly_Voyage_Count\n1                      0                     1                   6\n2                      0                     1                   9\n3                      1                     1                   1\n4                      1                     1                   8\n5                      1                     1                   7\n6                      1                     1                   3\n7                      1                     1                   6\n8                      0                     1                   2\n9                      0                     1                   9\n10                     1                     1                   4\n11                     1                     1                   3\n12                     1                     1                   7\n13                     1                     1                   7\n14                     1                     1                   2\n15                     1                     1                   4\n16                     1                     1                   3\n17                     0                     1                   6\n18                     0                     1                   3\n19                     1                     1                   4\n20                     1                     1                   5\n   Average_Load_Percentage\n1                       94\n2                       96\n3                       66\n4                       80\n5                       53\n6                       59\n7                       95\n8                       79\n9                       71\n10                      66\n11                      84\n12                      88\n13                      68\n14                      81\n15                      98\n16                      95\n17                      60\n18                      69\n19                      58\n20                      77\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for remaining \"None\" values in each column\nnone_counts <- sapply(ship_data, function(x) sum(x == \"None\", na.rm = TRUE))\n\n# Check for any NA values in each column\nna_counts <- colSums(is.na(ship_data))\n\n# Count total missing values in the dataset\ntotal_missing <- sum(is.na(ship_data))\n\n# Show rows that still contain missing values\nmissing_rows <- ship_data[!complete.cases(ship_data), ]\n\n# Print results\ncat(\"\\nMissing Value Summary:\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nMissing Value Summary:\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(data.frame(Column = names(na_counts), NA_Count = na_counts, None_Count = none_counts))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                                         Column NA_Count None_Count\nDate                                       Date        0          0\nShip_Type                             Ship_Type        0          0\nRoute_Type                           Route_Type        0          0\nEngine_Type                         Engine_Type        0          0\nMaintenance_Status           Maintenance_Status        0          0\nSpeed_Over_Ground_knots Speed_Over_Ground_knots        0          0\nEngine_Power_kW                 Engine_Power_kW        0          0\nDistance_Traveled_nm       Distance_Traveled_nm        0          0\nDraft_meters                       Draft_meters        0          0\nWeather_Condition             Weather_Condition        0          0\nCargo_Weight_tons             Cargo_Weight_tons        0          0\nOperational_Cost_USD       Operational_Cost_USD        0          0\nRevenue_per_Voyage_USD   Revenue_per_Voyage_USD        0          0\nTurnaround_Time_hours     Turnaround_Time_hours        0          0\nEfficiency_nm_per_kWh     Efficiency_nm_per_kWh        0          0\nSeasonal_Impact_Score     Seasonal_Impact_Score        0          0\nWeekly_Voyage_Count         Weekly_Voyage_Count        0          0\nAverage_Load_Percentage Average_Load_Percentage        0          0\n```\n\n\n:::\n\n```{.r .cell-code}\ncat(\"\\nTotal missing values across dataset:\", total_missing, \"\\n\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nTotal missing values across dataset: 0 \n```\n\n\n:::\n\n```{.r .cell-code}\n# If any missing rows exist, display them\nif (nrow(missing_rows) > 0) {\n  cat(\"\\nRows with missing values:\\n\")\n  print(missing_rows)\n} else {\n  cat(\"\\n✅ No missing values found. Dataset is clean!\\n\")\n}\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n✅ No missing values found. Dataset is clean!\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\n## Exploratory Data Analysis (EDA)\n\nVisualizing Key Metrics\n\n### Ship Speed Distribution\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Speed_Over_Ground_knots)) + \n  geom_histogram(fill = \"blue\", bins = 30, alpha = 0.7) +\n  geom_density(alpha = 0.5, fill = \"lightblue\") +\n  theme_minimal() +\n  labs(title = \"Distribution of Ship Speed\",\n       x = \"Speed Over Ground (Knots)\",\n       y = \"Frequency\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Correlation: Fuel Efficiency vs. Speed\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Date\"                    \"Ship_Type\"              \n [3] \"Route_Type\"              \"Engine_Type\"            \n [5] \"Maintenance_Status\"      \"Speed_Over_Ground_knots\"\n [7] \"Engine_Power_kW\"         \"Distance_Traveled_nm\"   \n [9] \"Draft_meters\"            \"Weather_Condition\"      \n[11] \"Cargo_Weight_tons\"       \"Operational_Cost_USD\"   \n[13] \"Revenue_per_Voyage_USD\"  \"Turnaround_Time_hours\"  \n[15] \"Efficiency_nm_per_kWh\"   \"Seasonal_Impact_Score\"  \n[17] \"Weekly_Voyage_Count\"     \"Average_Load_Percentage\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Speed_Over_Ground_knots, y = Efficiency_nm_per_kWh, color = Ship_Type)) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  theme_minimal() +\n  labs(title = \"Fuel Efficiency vs. Ship Speed\",\n       x = \"Speed (Knots)\",\n       y = \"Efficiency (nm per kWh)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Operational Cost vs. Revenue per Voyage by Ship Type\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Operational_Cost_USD, y = Revenue_per_Voyage_USD, color = Ship_Type)) +\n  geom_point(alpha = 0.7) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  theme_minimal() +\n  labs(title = \"Operational Cost vs. Revenue per Voyage\",\n       x = \"Operational Cost (USD)\",\n       y = \"Revenue per Voyage (USD)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Use geom_boxplot() for Distribution Insight\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Ship_Type, y = Revenue_per_Voyage_USD, fill = Ship_Type)) +\n  geom_boxplot() +\n  theme_minimal() +\n  labs(title = \"Revenue Distribution by Ship Type\",\n       x = \"Ship Type\",\n       y = \"Revenue per Voyage (USD)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncolnames(ship_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"Date\"                    \"Ship_Type\"              \n [3] \"Route_Type\"              \"Engine_Type\"            \n [5] \"Maintenance_Status\"      \"Speed_Over_Ground_knots\"\n [7] \"Engine_Power_kW\"         \"Distance_Traveled_nm\"   \n [9] \"Draft_meters\"            \"Weather_Condition\"      \n[11] \"Cargo_Weight_tons\"       \"Operational_Cost_USD\"   \n[13] \"Revenue_per_Voyage_USD\"  \"Turnaround_Time_hours\"  \n[15] \"Efficiency_nm_per_kWh\"   \"Seasonal_Impact_Score\"  \n[17] \"Weekly_Voyage_Count\"     \"Average_Load_Percentage\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Ship_Type, y = Revenue_per_Voyage_USD, fill = Ship_Type)) +\n  geom_boxplot() +\n  facet_wrap(~ Route_Type, scales = \"free\") +  # Split by route type\n  theme_minimal() +\n  labs(title = \"Revenue Distribution by Ship Type and Route Type\",\n       x = \"Ship Type\",\n       y = \"Revenue per Voyage (USD)\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Ship_Type, y = Revenue_per_Voyage_USD / 1e6, fill = Ship_Type)) +\n  geom_boxplot() +\n  facet_grid(Route_Type ~ Engine_Type, scales = \"free\") +  # Split by Route & Engine Type\n  theme_minimal() +\n  labs(title = \"Revenue Distribution by Ship Type, Route Type, and Engine Type\",\n       x = \"Ship Type\",\n       y = \"Revenue per Voyage (Million USD)\") +  # Updated y-axis label\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-17-1.png){width=1536}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Ship_Type, y = Revenue_per_Voyage_USD / 1e6, fill = Weather_Condition)) +\n  geom_boxplot() +\n  facet_grid(Route_Type ~ Engine_Type, scales = \"free\") +  # Facet by Route Type (rows) & Engine Type (columns)\n  theme_minimal() +\n  labs(title = \"Revenue Distribution by Ship Type, Route Type, Engine Type, and Weather Condition\",\n       x = \"Ship Type\",\n       y = \"Revenue per Voyage (Million USD)\",\n       fill = \"Weather Condition\") +  # Updated legend title\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for readability\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-18-1.png){width=2304}\n:::\n:::\n\n\n\n\n\n### Use geom_smooth() with Aggregation (LOESS or GAM Smoothing)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(ship_data, aes(x = Operational_Cost_USD, y = Revenue_per_Voyage_USD, color = Ship_Type)) +\n  geom_smooth(method = \"loess\", se = FALSE, linewidth = 1.2) +  # LOESS smooth to capture trends\n  theme_minimal() +\n  labs(title = \"Smoothed Revenue Trends by Operational Cost\",\n       x = \"Operational Cost (USD)\",\n       y = \"Revenue per Voyage (USD)\")\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex01_efm_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex01_efm_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}