{
  "hash": "c68adcb19929cc5f31140bf167a711c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"In-class Exercise 7\"\nauthor: \"Ee Fook Ming\"\ndate: \"March 01, 2025\"\ndate-modified: last-modified\nexecute:\n  echo: true\n  eval: true\n  warning: false\n  freeze: true\n  fig-width: 8\n  fig-height: 12\nformat: \n  html:\n    number-sections: true\n    number-offset: [18, 0]  # Offset heading levels by starting at 19\noutput: \n  html_document: \n    toc: true\n    tabset: true\n---\n\n\n\n# Visualising, Analysing and Forecasting Time-series Data: tidyverts methods\n\n## Learning Outcome\n\n[tidyverts](https://tidyverts.org/) is a family of R packages specially designed for visualising, analysing and forecasting time-series data conforming to tidyverse framework. It is the work of [Dr. Rob Hyndman](https://robjhyndman.com/), professor of statistics at Monash University, and his team. The family of R packages are intended to be the next-generation replacement for the very popular [forecast](https://pkg.robjhyndman.com/forecast/) package, and is currently under active development.\n\nThe main reference for tidyverts is the textbook [Forecasting: Principles and Practice, 3rd Edition](https://otexts.com/fpp3/), by Hyndman and Athanasopoulos. It’s highly recommended to read that in conjunction with working through the notebooks here.\n\nBy the end of this session, you will be able to:\n\n-   import and wrangling time-series data by using appropriate tidyverse methods,\n\n-   visualise and analyse time-series data,\n\n-   calibrate time-series forecasting models by using exponential smoothing and ARIMA techniques, and\n\n-   compare and evaluate the performance of forecasting models.\n\n## Getting Started\n\nFor the purpose of this hands-on exercise, the following R packages will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, tsibble, feasts, fable, seasonal)\n```\n:::\n\n\n\n-   [**lubridate**](https://lubridate.tidyverse.org/) provides a collection to functions to parse and wrangle time and date data.\n\n-   tsibble, feasts, fable and fable.prophet are belong to [**tidyverts**](https://tidyverts.org/), a family of tidy tools for time series data handling, analysis and forecasting.\n\n    -   [**tsibble**](https://tsibble.tidyverts.org/) provides a data infrastructure for tidy temporal data with wrangling tools. Adapting the tidy data principles, tsibble is a data- and model-oriented object.\n\n    -   [**feasts**](https://feasts.tidyverts.org/) provides a collection of tools for the analysis of time series data. The package name is an acronym comprising of its key features: Feature Extraction And Statistics for Time Series.\n\n### Importing the data\n\nFirst, `read_csv()` of **readr** package is used to import *visitor_arrivals_by_air.csv* file into R environment. The imported file is saved an tibble object called *ts_data*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data <- read_csv(\n  \"data/visitor_arrivals_by_air.csv\")\n```\n:::\n\n\n\nIn the code chunk below, `dmy()` of **lubridate** package is used to convert data type of Month-Year field from Character to Date.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data$`Month-Year` <- dmy(\n  ts_data$`Month-Year`)\n```\n:::\n\n\n\n### Conventional base `ts` object versus `tibble` object\n\ntibble object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 144 × 34\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   <date>                            <dbl>  <dbl> <dbl>      <dbl>  <dbl> <dbl>\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 27 more variables: `Hong Kong SAR (China)` <dbl>, India <dbl>,\n#   Indonesia <dbl>, Japan <dbl>, `South Korea` <dbl>, Kuwait <dbl>,\n#   Malaysia <dbl>, Myanmar <dbl>, Pakistan <dbl>, Philippines <dbl>,\n#   `Saudi Arabia` <dbl>, `Sri Lanka` <dbl>, Taiwan <dbl>, Thailand <dbl>,\n#   `United Arab Emirates` <dbl>, Vietnam <dbl>, `Belgium & Luxembourg` <dbl>,\n#   Finland <dbl>, France <dbl>, Germany <dbl>, Italy <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n### Conventional base `ts` object versus `tibble` object\n\nts object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_data_ts <- ts(ts_data)       \nhead(ts_data_ts)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n     Month-Year Republic of South Africa Canada   USA Bangladesh Brunei China\n[1,]      13879                     3680   6972 31155       6786   3729 79599\n[2,]      13910                     1662   6056 27738       6314   3070 82074\n[3,]      13939                     3394   6220 31349       7502   4805 72546\n[4,]      13970                     3337   4764 26376       7333   3096 76112\n[5,]      14000                     2089   4460 26788       7988   3586 64808\n[6,]      14031                     2515   3888 29725       8301   5284 55238\n     Hong Kong SAR (China) India Indonesia Japan South Korea Kuwait Malaysia\n[1,]                 17103 41639     62683 37673       27937    284    31352\n[2,]                 21089 37170     47834 35297       22633    241    35030\n[3,]                 23230 44815     64688 42575       22876    206    37629\n[4,]                 17688 49527     58074 26839       20634    193    37521\n[5,]                 19340 67754     57089 30814       22785    140    38044\n[6,]                 19152 57380     70118 31001       22575    354    40419\n     Myanmar Pakistan Philippines Saudi Arabia Sri Lanka Taiwan Thailand\n[1,]    5269     1395       18622          406      5289  13757    18370\n[2,]    4643     1027       21609          591      4767  13921    16400\n[3,]    6218     1635       28464          626      4988  11181    23387\n[4,]    7324     1232       30131          644      7639  11665    24469\n[5,]    5395     1306       30193          470      5125  11436    21935\n[6,]    5542     1996       25800          772      4791  10689    19900\n     United Arab Emirates Vietnam Belgium & Luxembourg Finland France Germany\n[1,]                 2652   10315                 1341    1179   6918   11982\n[2,]                 2230   13415                 1449    1207   7876   13256\n[3,]                 3353   14320                 1674    1071   8066   15185\n[4,]                 3245   15413                 1426     768   8312   11604\n[5,]                 2856   14424                 1243     690   7066    9853\n[6,]                 4292   21368                 1255     624   5926    9347\n     Italy Netherlands Spain Switzerland United Kingdom Australia New Zealand\n[1,]  2953        4938  1668        4450          41934     71260        7806\n[2,]  2704        4885  1568        4381          44029     45595        4729\n[3,]  2822        5015  2254        5015          49489     53191        6106\n[4,]  3018        4902  1503        5434          35771     56514        7560\n[5,]  2165        4397  1365        4427          24464     57808        9090\n[6,]  2022        4166  1446        3359          22473     63350        9681\n```\n\n\n:::\n:::\n\n\n\n### Converting `tibble` object to `tsibble` object\n\nBuilt on top of the tibble, a **tsibble** (or tbl_ts) is a data- and model-oriented object. Compared to the conventional time series objects in R, for example ts, zoo, and xts, the tsibble preserves time indices as the essential data column and makes heterogeneous data structures possible. Beyond the tibble-like representation, key comprised of single or multiple variables is introduced to uniquely identify observational units over time (index).\n\nThe code chunk below converting ts_data from tibble object into tsibble object by using [`as_tsibble()`](https://tsibble.tidyverts.org/reference/as-tsibble.html) of **tsibble** R package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tsibble <- ts_data %>%\n  mutate(Month = yearmonth(`Month-Year`)) %>%\n  as_tsibble(index = `Month`)\n```\n:::\n\n\n\nWhat can we learn from the code chunk above? + [`mutate()`](https://r4va.netlify.app/chap19) of **dplyr** package is used to derive a new field by transforming the data values in Month-Year field into month-year format. The transformation is performed by using [`yearmonth()`](https://tsibble.tidyverts.org/reference/year-month.html) of **tsibble** package. + [`as_tsibble()`](https://tsibble.tidyverts.org/reference/as-tibble.html) is used to convert the tibble data frame into tsibble data frame.\n\n### tsibble object\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_tsibble\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 144 x 35 [1M]\n   `Month-Year` `Republic of South Africa` Canada   USA Bangladesh Brunei China\n   <date>                            <dbl>  <dbl> <dbl>      <dbl>  <dbl> <dbl>\n 1 2008-01-01                         3680   6972 31155       6786   3729 79599\n 2 2008-02-01                         1662   6056 27738       6314   3070 82074\n 3 2008-03-01                         3394   6220 31349       7502   4805 72546\n 4 2008-04-01                         3337   4764 26376       7333   3096 76112\n 5 2008-05-01                         2089   4460 26788       7988   3586 64808\n 6 2008-06-01                         2515   3888 29725       8301   5284 55238\n 7 2008-07-01                         2919   5313 33183       9004   4070 80747\n 8 2008-08-01                         2471   4519 27427       7913   4183 66625\n 9 2008-09-01                         2492   3421 21588       7549   3160 52649\n10 2008-10-01                         3023   4756 25112       7527   2983 54423\n# ℹ 134 more rows\n# ℹ 28 more variables: `Hong Kong SAR (China)` <dbl>, India <dbl>,\n#   Indonesia <dbl>, Japan <dbl>, `South Korea` <dbl>, Kuwait <dbl>,\n#   Malaysia <dbl>, Myanmar <dbl>, Pakistan <dbl>, Philippines <dbl>,\n#   `Saudi Arabia` <dbl>, `Sri Lanka` <dbl>, Taiwan <dbl>, Thailand <dbl>,\n#   `United Arab Emirates` <dbl>, Vietnam <dbl>, `Belgium & Luxembourg` <dbl>,\n#   Finland <dbl>, France <dbl>, Germany <dbl>, Italy <dbl>, …\n```\n\n\n:::\n:::\n\n\n\n## Visualising Time-series Data\n\nIn order to visualise the time-series data effectively, we need to organise the data frame from wide to long format by using [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) of **tidyr** package as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer <- ts_data %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n\n\n### Visualising single time-series: ggplot2 methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nts_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  ggplot(aes(x = `Month-Year`, \n             y = Arrivals))+\n  geom_line(size = 0.5)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-9-1.png){width=768}\n:::\n:::\n\n\n\nWhat can we learn from the code chunk above?\n\n-   [`filter()`](https://dplyr.tidyverse.org/reference/filter.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to select records belong to Vietnam.\n\n-   [`geom_line()`](https://ggplot2.tidyverse.org/reference/geom_path.html) of [**ggplot2**](https://ggplot2.tidyverse.org/) package is used to plot the time-series line graph. \\]\n\n### Plotting multiple time-series data with ggplot2 methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals,\n           color = Country))+\n  geom_line(size = 0.5) +\n  theme(legend.position = \"bottom\", \n        legend.box.spacing = unit(0.5, \"cm\"))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-10-1.png){width=768}\n:::\n:::\n\n\n\nIn order to provide effective comparison, [`facet_wrap()`](https://ggplot2.tidyverse.org/reference/facet_wrap.html) of **ggplot2** package is used to create small multiple line graph also known as trellis plot.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = ts_longer, \n       aes(x = `Month-Year`, \n           y = Arrivals))+\n  geom_line(size = 0.5) +\n  facet_wrap(~ Country,\n             ncol = 3,\n             scales = \"free_y\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-11-1.png){width=768}\n:::\n:::\n\n\n\n## Visual Analysis of Time-series Data\n\n-   Time series datasets can contain a seasonal component.\n\n-   This is a cycle that repeats over time, such as monthly or yearly. This repeating cycle may obscure the signal that we wish to model when forecasting, and in turn may provide a strong signal to our predictive models.\n\nIn this section, you will discover how to identify seasonality in time series data by using functions provides by **feasts** packages.\n\nIn order to visualise the time-series data effectively, we need to organise the data frame from wide to long format by using [`pivot_longer()`](https://tidyr.tidyverse.org/reference/pivot_longer.html) of **tidyr** package as shown below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer <- ts_tsibble %>%\n  pivot_longer(cols = c(2:34),\n               names_to = \"Country\",\n               values_to = \"Arrivals\")\n```\n:::\n\n\n\n### Visual Analysis of Seasonality with Seasonal Plot\n\nA **seasonal plot** is similar to a time plot except that the data are plotted against the individual **seasons** in which the data were observed.\n\nA season plot is created by using [`gg_season()`](https://feasts.tidyverts.org/reference/gg_season.html) of **feasts** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Italy\" |\n         Country == \"Vietnam\" |\n         Country == \"United Kingdom\" |\n         Country == \"Germany\") %>% \n  gg_season(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\n\n### Visual Analysis of Seasonality with Cycle Plot\n\nA **cycle plot** shows how a trend or cycle changes over time. We can use them to see seasonal patterns. Typically, a cycle plot shows a measure on the Y-axis and then shows a time period (such as months or seasons) along the X-axis. For each time period, there is a trend line across a number of years.\n\nFigure below shows two time-series lines of visitor arrivals from Vietnam and Italy. Both lines reveal clear sign of seasonal patterns but not the trend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  autoplot(Arrivals) + \n  facet_grid(Country ~ ., scales = \"free_y\")\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n\nIn the code chunk below, cycle plots using [`gg_subseries()`](https://feasts.tidyverts.org/reference/gg_subseries.html) of feasts package are created. Notice that the cycle plots show not only seasonal patterns but also trend.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Italy\") %>% \n  gg_subseries(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-15-1.png){width=768}\n:::\n:::\n\n\n\n## Time series decomposition\n\nTime series decomposition allows us to isolate structural components such as trend and seasonality from the time-series data.\n\n![](images/clipboard-2847330727.png)\n\n### Single time series decomposition\n\nIn **feasts** package, time series decomposition is supported by [`ACF()`](https://feasts.tidyverts.org/reference/ACF.html), `PACF()`, `CCF()`, [`feat_acf()`](https://feasts.tidyverts.org/reference/feat_acf.html), and [`feat_pacf()`](https://feasts.tidyverts.org/reference/feat_acf.html). The output can then be plotted by using `autoplot()` of **feasts** package.\n\nIn the code chunk below, `ACF()` of **feasts** package is used to plot the ACF curve of visitor arrival from Vietnam.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  ACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-16-1.png){width=768}\n:::\n:::\n\n\n\nIn the code chunk below, `PACF()` of **feasts** package is used to plot the Partial ACF curve of visitor arrival from Vietnam.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  PACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-17-1.png){width=768}\n:::\n:::\n\n\n\n### Multiple time-series decomposition\n\nCode chunk below is used to prepare a trellis plot of ACFs for visitor arrivals from Vietnam, Italy, United Kingdom and China.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %>%\n  ACF(Arrivals) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-18-1.png){width=768}\n:::\n:::\n\n\n\nOn the other hand, code chunk below is used to prepare a trellis plot of PACFs for visitor arrivals from Vietnam, Italy, United Kingdom and China.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\" |\n         `Country` == \"Italy\" |\n         `Country` == \"United Kingdom\" |\n         `Country` == \"China\") %>%\n  PACF(Arrivals) %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-19-1.png){width=768}\n:::\n:::\n\n\n\n### Composite plot of time series decomposition\n\nOne of the interesting function of feasts package time series decomposition is [`gg_tsdisplay()`](https://feasts.tidyverts.org/reference/gg_tsdisplay.html). It provides a composite plot by showing the original line graph on the top pane follow by the ACF on the left and seasonal plot on the right.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  gg_tsdisplay(Arrivals)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-20-1.png){width=768}\n:::\n:::\n\n\n\n## Visual STL Diagnostics\n\nSTL is an acronym for “Seasonal and Trend decomposition using Loess”, while Loess is a method for estimating nonlinear relationships. It was developed by R. B. Cleveland, Cleveland, McRae, & Terpenning (1990).\n\nSTL is a robust method of time series decomposition often used in economic and environmental analyses. The STL method uses locally fitted regression models to decompose a time series into trend, seasonal, and remainder components.\n\nThe STL algorithm performs smoothing on the time series using LOESS in two loops; the inner loop iterates between seasonal and trend smoothing and the outer loop minimizes the effect of outliers. During the inner loop, the seasonal component is calculated first and removed to calculate the trend component. The remainder is calculated by subtracting the seasonal and trend components from the time series.\n\nSTL has several advantages over the classical, SEATS and X11 decomposition methods:\n\n-   Unlike SEATS and X11, STL will handle any type of seasonality, not only monthly and quarterly data.\n\n-   The seasonal component is allowed to change over time, and the rate of change can be controlled by the user.\n\n-   The smoothness of the trend-cycle can also be controlled by the user.\n\n-   It can be robust to outliers (i.e., the user can specify a robust decomposition), so that occasional unusual observations will not affect the estimates of the trend-cycle and seasonal components. They will, however, affect the remainder component.\n\n### Visual STL diagnostics with feasts\n\nIn the code chunk below, `STL()` of **feasts** package is used to decomposite visitor arrivals from Vietnam data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  model(stl = STL(Arrivals)) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-21-1.png){width=768}\n:::\n:::\n\n\n\nThe grey bars to the left of each panel show the relative scales of the components. Each grey bar represents the same length but because the plots are on different scales, the bars vary in size. The large grey bar in the bottom panel shows that the variation in the remainder component is smallest compared to the variation in the data. If we shrank the bottom three panels until their bars became the same size as that in the data panel, then all the panels would be on the same scale.\n\n### Classical Decomposition with feasts\n\nIn the code chunk below, `classical_decomposition()` of **feasts** package is used to decompose a time series into seasonal, trend and irregular components using moving averages. THe function is able to deal with both additive or multiplicative seasonal component.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  model(\n    classical_decomposition(\n      Arrivals, type = \"additive\")) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-22-1.png){width=768}\n:::\n:::\n\n\n\n## Visual Forecasting\n\nIn this section, two R packages belong to tidyverts family will be used they are:\n\n-   [**fable**](https://lubridate.tidyverse.org/) provides a collection of commonly used univariate and multivariate time series forecasting models including exponential smoothing via state space models and automatic ARIMA modelling. It is a tidy version of the popular [**forecast**](https://cran.r-project.org/web/packages/forecast/index.html) package and a member of [**tidyverts**](https://tidyverts.org/).\n\n-   [**fabletools**](https://fabletools.tidyverts.org/) provides tools for building modelling packages, with a focus on time series forecasting. This package allows package developers to extend fable with additional models, without needing to depend on the models supported by fable.\n\nFigure below shows a typical flow of a time-series forecasting process.\n\n![](https://r4va.netlify.app/chap19/image5.jpg){width=\"286\"}\n\n### Time Series Data Sampling\n\nA good practice in forecasting is to split the original data set into a training and a hold-out data sets. The first part is called **estimate sample** (also known as training data). It will be used to estimate the starting values and the smoothing parameters. This sample typically contains 75-80 percent of the observation, although the forecaster may choose to use a smaller percentage for longer series.\n\nThe second part of the time series is called **hold-out sample**. It is used to check the forecasting performance. No matter how many parameters are estimated with the estimation sample, each method under consideration can be evaluated with the use of the “new” observation contained in the hold-out sample.\n\n![](images/clipboard-861234509.png)\n\nIn this example we will use the last 12 months for hold-out and the rest for training.First, an extra column called *Type* indicating training or hold-out will be created by using `mutate()` of **dplyr** package. It will be extremely useful for subsequent data visualisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_ts <- tsibble_longer %>%\n  filter(Country == \"Vietnam\") %>% \n  mutate(Type = if_else(\n    `Month-Year` >= \"2019-01-01\", \n    \"Hold-out\", \"Training\"))\n```\n:::\n\n\n\nNext, a training data set is extracted from the original data set by using `filter()` of **dplyr** package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train <- vietnam_ts %>%\n  filter(`Month-Year` < \"2019-01-01\")\n```\n:::\n\n\n\n### Exploratory Data Analysis (EDA): Time Series Data\n\nBefore fitting forecasting models, it is a good practice to analysis the time series data by using EDA methods.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train %>%\n  model(stl = STL(Arrivals)) %>%\n  components() %>%\n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-25-1.png){width=768}\n:::\n:::\n\n\n\n### Fitting forecasting models\n\n#### Fitting Exponential Smoothing State Space (ETS) Models: fable methods\n\nIn fable, Exponential Smoothing State Space Models are supported by [`ETS()`](https://fable.tidyverts.org/reference/ETS.html). The combinations are specified through the formula:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nETS(y ~ error(c(\"A\", \"M\"),\n               trend(c(\"N\", \"A\", \"Ad\")),\n               season(c(\"N\", \"A\", \"M\"))))   \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<ETS model definition>\n```\n\n\n:::\n:::\n\n\n\n#### Fitting a simple exponential smoothing (SES)\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ses <- vietnam_train %>%\n  model(ETS(Arrivals ~ error(\"A\") \n            + trend(\"N\") \n            + season(\"N\")))\nfit_ses\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A mable: 1 x 2\n# Key:     Country [1]\n  Country `ETS(Arrivals ~ error(\"A\") + trend(\"N\") + season(\"N\"))`\n  <chr>                                                   <model>\n1 Vietnam                                            <ETS(A,N,N)>\n```\n\n\n:::\n:::\n\n\n\nNotice that `model()` of fable package is used to estimate the ETS model on a particular dataset, and returns a **mable** (model table) object.\n\nA mable contains a row for each time series (uniquely identified by the key variables), and a column for each model specification. A model is contained within the cells of each model column.\n\n#### Examine Model Assumptions\n\nNext, `gg_tsresiduals()` of **feasts** package is used to check the model assumptions with residuals plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(fit_ses)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-28-1.png){width=768}\n:::\n:::\n\n\n\nThe model details\n\nreport() of fabletools is be used to reveal the model details.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ses %>%\n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(A,N,N) \n  Smoothing parameters:\n    alpha = 0.9998995 \n\n  Initial states:\n     l[0]\n 10312.99\n\n  sigma^2:  27939164\n\n     AIC     AICc      BIC \n2911.726 2911.913 2920.374 \n```\n\n\n:::\n:::\n\n\n\n#### Fitting ETS Methods with Trend: Holt’s Linear\n\n#### Trend methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_H <- vietnam_train %>%\n  model(`Holt's method` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"A\") + \n                season(\"N\")))\nvietnam_H %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(A,A,N) \n  Smoothing parameters:\n    alpha = 0.9998995 \n    beta  = 0.0001004625 \n\n  Initial states:\n     l[0]     b[0]\n 13673.29 525.8859\n\n  sigma^2:  28584805\n\n     AIC     AICc      BIC \n2916.695 2917.171 2931.109 \n```\n\n\n:::\n:::\n\n\n\n#### Damped Trend methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_HAd <- vietnam_train %>%\n  model(`Holt's method` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"Ad\") + \n                season(\"N\")))\nvietnam_HAd %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(A,Ad,N) \n  Smoothing parameters:\n    alpha = 0.9998999 \n    beta  = 0.0001098602 \n    phi   = 0.9784562 \n\n  Initial states:\n     l[0]   b[0]\n 13257.28 523.54\n\n  sigma^2:  28641536\n\n     AIC     AICc      BIC \n2917.921 2918.593 2935.218 \n```\n\n\n:::\n:::\n\n\n\n#### Checking for results\n\nCheck the model assumptions with residuals plots.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(vietnam_H)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-32-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(vietnam_HAd)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-33-1.png){width=768}\n:::\n:::\n\n\n\n### Fitting ETS Methods with Season: Holt-Winters\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nVietnam_WH <- vietnam_train %>%\n  model(\n    Additive = ETS(Arrivals ~ error(\"A\") \n                   + trend(\"A\") \n                   + season(\"A\")),\n    Multiplicative = ETS(Arrivals ~ error(\"M\") \n                         + trend(\"A\") \n                         + season(\"M\"))\n    )\n\nVietnam_WH %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 10\n  Country .model          sigma2 log_lik   AIC  AICc   BIC    MSE   AMSE     MAE\n  <chr>   <chr>            <dbl>   <dbl> <dbl> <dbl> <dbl>  <dbl>  <dbl>   <dbl>\n1 Vietnam Additive       5.33e+6  -1336. 2706. 2711. 2755. 4.68e6 8.56e6 1.72e+3\n2 Vietnam Multiplicative 4.55e-3  -1300. 2635. 2640. 2684. 3.05e6 3.42e6 5.20e-2\n```\n\n\n:::\n:::\n\n\n\n### Fitting multiple ETS Models\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS <- vietnam_train %>%\n  model(`SES` = ETS(Arrivals ~ error(\"A\") + \n                      trend(\"N\") + \n                      season(\"N\")),\n        `Holt`= ETS(Arrivals ~ error(\"A\") +\n                      trend(\"A\") +\n                      season(\"N\")),\n        `damped Holt` = \n          ETS(Arrivals ~ error(\"A\") +\n                trend(\"Ad\") + \n                season(\"N\")),\n        `WH_A` = ETS(\n          Arrivals ~ error(\"A\") + \n            trend(\"A\") + \n            season(\"A\")),\n        `WH_M` = ETS(Arrivals ~ error(\"M\") \n                         + trend(\"A\") \n                         + season(\"M\"))\n  )\n```\n:::\n\n\n\n### The model coefficient\n\ntidy() of fabletools is be used to extract model coefficients from a mable.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS %>%\n  tidy()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 45 × 4\n   Country .model      term      estimate\n   <chr>   <chr>       <chr>        <dbl>\n 1 Vietnam SES         alpha     1.00    \n 2 Vietnam SES         l[0]  10313.      \n 3 Vietnam Holt        alpha     1.00    \n 4 Vietnam Holt        beta      0.000100\n 5 Vietnam Holt        l[0]  13673.      \n 6 Vietnam Holt        b[0]    526.      \n 7 Vietnam damped Holt alpha     1.00    \n 8 Vietnam damped Holt beta      0.000110\n 9 Vietnam damped Holt phi       0.978   \n10 Vietnam damped Holt l[0]  13257.      \n# ℹ 35 more rows\n```\n\n\n:::\n:::\n\n\n\n### Step 4: Model Comparison\n\n`glance()` of fabletool\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS %>% \n  report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Country .model       sigma2 log_lik   AIC  AICc   BIC       MSE   AMSE     MAE\n  <chr>   <chr>         <dbl>   <dbl> <dbl> <dbl> <dbl>     <dbl>  <dbl>   <dbl>\n1 Vietnam SES         2.79e+7  -1453. 2912. 2912. 2920. 27515844. 5.99e7 3.91e+3\n2 Vietnam Holt        2.86e+7  -1453. 2917. 2917. 2931. 27718599. 6.03e7 3.92e+3\n3 Vietnam damped Holt 2.86e+7  -1453. 2918. 2919. 2935. 27556629. 5.97e7 3.92e+3\n4 Vietnam WH_A        5.33e+6  -1336. 2706. 2711. 2755.  4684271. 8.56e6 1.72e+3\n5 Vietnam WH_M        4.55e-3  -1300. 2635. 2640. 2684.  3046059. 3.42e6 5.20e-2\n```\n\n\n:::\n:::\n\n\n\n### Step 5: Forecasting future values\n\nTo forecast the future values, `forecast()` of fable will be used. Notice that the forecast period is 12 months.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_ETS %>%\n  forecast(h = \"12 months\") %>%\n  autoplot(vietnam_ts, \n           level = NULL)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-38-1.png){width=768}\n:::\n:::\n\n\n\n### Fitting ETS Automatically\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoETS <- vietnam_train %>%\n  model(ETS(Arrivals))\nfit_autoETS %>% report()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: ETS(M,A,M) \n  Smoothing parameters:\n    alpha = 0.1613503 \n    beta  = 0.0001021811 \n    gamma = 0.0001030996 \n\n  Initial states:\n     l[0]     b[0]      s[0]     s[-1]     s[-2]     s[-3]    s[-4]    s[-5]\n 15001.12 212.3552 0.9167302 0.8311728 0.8739287 0.8690543 1.104668 1.485584\n    s[-6]     s[-7]    s[-8]     s[-9]    s[-10]    s[-11]\n 1.311207 0.9917759 1.014187 0.8973028 0.8816768 0.8227129\n\n  sigma^2:  0.0046\n\n     AIC     AICc      BIC \n2634.751 2640.119 2683.759 \n```\n\n\n:::\n:::\n\n\n\n### Fitting Fitting ETS Automatically\n\nNext, we will check the model assumptions with residuals plots by using `gg_tsresiduals()` of **feasts** package\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngg_tsresiduals(fit_autoETS)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-40-1.png){width=768}\n:::\n:::\n\n\n\n### Forecast the future values\n\nIn the code chunk below, `forecast()` of **fable** package is used to forecast the future values. Then, `autoplot()` of **feasts** package is used to see the training data along with the forecast values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoETS %>%\n  forecast(h = \"12 months\") %>%\n  autoplot(vietnam_train)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-41-1.png){width=768}\n:::\n:::\n\n\n\n### Visualising AutoETS model with ggplot2\n\nThere are time that we are interested to visualise relationship between training data and fit data and forecasted values versus the hold-out data.\n\n![](images/clipboard-382556844.png)\n\n### Visualising AutoETS model with ggplot2\n\nCode chunk below is used to create the data visualisation in previous slide.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfc_autoETS <- fit_autoETS %>%\n  forecast(h = \"12 months\")\n\nvietnam_ts %>%\n  ggplot(aes(x=`Month`, \n             y=Arrivals)) +\n  autolayer(fc_autoETS, \n            alpha = 0.6) +\n  geom_line(aes(\n    color = Type), \n    alpha = 0.8) + \n  geom_line(aes(\n    y = .mean, \n    colour = \"Forecast\"), \n    data = fc_autoETS) +\n  geom_line(aes(\n    y = .fitted, \n    colour = \"Fitted\"), \n    data = augment(fit_autoETS))\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-42-1.png){width=768}\n:::\n:::\n\n\n\n## AutoRegressive Integrated Moving Average(ARIMA) Methods for Time Series Forecasting: fable (tidyverts) methods\n\n### Visualising Autocorrelations: feasts methods\n\n**feasts** package provides a very handy function for visualising ACF and PACF of a time series called [`gg_tsdiaply()`](https://feasts.tidyverts.org/reference/gg_tsdisplay.html).\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nvietnam_train %>%\n  gg_tsdisplay(plot_type='partial')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-43-1.png){width=768}\n:::\n:::\n\n\n\n### Visualising Autocorrelations: feasts methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"Vietnam\") %>%\n  ACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-44-1.png){width=768}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(`Country` == \"United Kingdom\") %>%\n  ACF(Arrivals) %>% \n  autoplot()\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-45-1.png){width=768}\n:::\n:::\n\n\n\nBy comparing both ACF plots, it is clear that visitor arrivals from United Kingdom were very seasonal and relatively weaker trend as compare to visitor arrivals from Vietnam.\n\n### Differencing: fable methods\n\n#### Trend differencing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  gg_tsdisplay(difference(\n    Arrivals,\n    lag = 1), \n    plot_type='partial')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-46-1.png){width=768}\n:::\n:::\n\n\n\n#### Seasonal differencing\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntsibble_longer %>%\n  filter(Country == \"Vietnam\") %>%\n  gg_tsdisplay(difference(\n    Arrivals,\n    difference = 12), \n    plot_type='partial')\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-47-1.png){width=768}\n:::\n:::\n\n\n\nThe PACF is suggestive of an AR(1) model; so an initial candidate model is an ARIMA(1,1,0). The ACF suggests an MA(1) model; so an alternative candidate is an ARIMA(0,1,1).\n\n### Fitting ARIMA models manually: fable methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_arima <- vietnam_train %>%\n  model(\n    arima200 = ARIMA(Arrivals ~ pdq(2,0,0)),\n    sarima210 = ARIMA(Arrivals ~ pdq(2,0,0) + \n                        PDQ(2,1,0))\n    )\nreport(fit_arima)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 9\n  Country .model      sigma2 log_lik   AIC  AICc   BIC ar_roots   ma_roots \n  <chr>   <chr>        <dbl>   <dbl> <dbl> <dbl> <dbl> <list>     <list>   \n1 Vietnam arima200  4173906.  -1085. 2181. 2182. 2198. <cpl [26]> <cpl [0]>\n2 Vietnam sarima210 4173906.  -1085. 2181. 2182. 2198. <cpl [26]> <cpl [0]>\n```\n\n\n:::\n:::\n\n\n\n### Fitting ARIMA models automatically: fable methods\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfit_autoARIMA <- vietnam_train %>%\n  model(ARIMA(Arrivals))\nreport(fit_autoARIMA)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSeries: Arrivals \nModel: NULL model \nNULL model\n```\n\n\n:::\n:::\n\n\n\n### Model Comparison\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_rows(\n    fit_autoARIMA %>% accuracy(),\n    fit_autoETS %>% accuracy(),\n    fit_autoARIMA %>% \n      forecast(h = 12) %>% \n      accuracy(vietnam_ts),\n    fit_autoETS %>% \n      forecast(h = 12) %>% \n      accuracy(vietnam_ts)) %>%\n  select(-ME, -MPE, -ACF1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 8\n  Country .model          .type     RMSE   MAE   MAPE    MASE   RMSSE\n  <chr>   <chr>           <chr>    <dbl> <dbl>  <dbl>   <dbl>   <dbl>\n1 Vietnam ARIMA(Arrivals) Training  NaN   NaN  NaN    NaN     NaN    \n2 Vietnam ETS(Arrivals)   Training 1745. 1386.   5.29   0.467   0.473\n3 Vietnam ARIMA(Arrivals) Test      NaN   NaN  NaN    NaN     NaN    \n4 Vietnam ETS(Arrivals)   Test     3163. 2636.   6.64   0.889   0.857\n```\n\n\n:::\n:::\n\n\n\n### Forecast Multiple Time Series\n\nIn this section, we will perform time series forecasting on multiple time series at one goal. For the purpose of the hand-on exercise, visitor arrivals from five selected ASEAN countries will be used.\n\nFirst, `filter()` is used to extract the selected countries’ data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN <- tsibble_longer %>%\n  filter(Country == \"Vietnam\" |\n         Country == \"Malaysia\" |\n         Country == \"Indonesia\" |\n         Country == \"Thailand\" |\n         Country == \"Philippines\")\n```\n:::\n\n\n\nNext, `mutate()` is used to create a new field called Type and populates their respective values. Lastly, `filter()` is used to extract the training data set and save it as a tsibble object called *ASEAN_train*.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_train <- ASEAN %>%\n  mutate(Type = if_else(\n    `Month-Year` >= \"2019-01-01\", \n    \"Hold-out\", \"Training\")) %>%\n  filter(Type == \"Training\")\n```\n:::\n\n\n\n### Fitting Mulltiple Time Series\n\nIn the code chunk below auto ETS and ARIMA models are fitted by using `model()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit <- ASEAN_train %>%\n  model(\n    ets = ETS(Arrivals),\n    arima = ARIMA(Arrivals)\n  )\n```\n:::\n\n\n\n### Examining Models\n\nThe `glance()` of **fabletools** provides a one-row summary of each model, and commonly includes descriptions of the model’s fit such as the residual variance and information criteria.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit %>%\n  glance()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Country     .model  sigma2 log_lik   AIC  AICc   BIC        MSE    AMSE    MAE\n  <chr>       <chr>    <dbl>   <dbl> <dbl> <dbl> <dbl>      <dbl>   <dbl>  <dbl>\n1 Indonesia   ets    0.0102   -1561. 3156. 3161. 3205. 173901516.  1.80e8 0.0732\n2 Malaysia    ets    0.00467  -1430. 2894. 2899. 2943.  20381756.  2.00e7 0.0506\n3 Philippines ets    0.00356  -1343. 2722. 2728. 2774.   5282584.  7.58e6 0.0461\n4 Thailand    ets    0.00663  -1343. 2722. 2728. 2774.   5396141.  6.33e6 0.0584\n5 Vietnam     ets    0.00455  -1300. 2635. 2640. 2684.   3046059.  3.42e6 0.0520\n```\n\n\n:::\n:::\n\n\n\n**Be wary though**, as information criteria (AIC, AICc, BIC) are only comparable between the same model class and only if those models share the same response (after transformations and differencing).\n\n### Extracintg fitted and residual values\n\nThe fitted values and residuals from a model can obtained using fitted() and residuals() respectively. Additionally, the augment() function may be more convenient, which provides the original data along with both fitted values and their residuals.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit %>%\n  augment()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tsibble: 1,320 x 7 [1M]\n# Key:       Country, .model [10]\n   Country   .model    Month Arrivals .fitted  .resid  .innov\n   <chr>     <chr>     <mth>    <dbl>   <dbl>   <dbl>   <dbl>\n 1 Indonesia ets    2008 Jan    62683  56534.   6149.  0.109 \n 2 Indonesia ets    2008 Feb    47834  46417.   1417.  0.0305\n 3 Indonesia ets    2008 Mar    64688  62660.   2028.  0.0324\n 4 Indonesia ets    2008 Apr    58074  61045.  -2971. -0.0487\n 5 Indonesia ets    2008 May    57089  62280.  -5191. -0.0833\n 6 Indonesia ets    2008 Jun    70118  75791.  -5673. -0.0749\n 7 Indonesia ets    2008 Jul    73805  78691.  -4886. -0.0621\n 8 Indonesia ets    2008 Aug    58015  61910.  -3895. -0.0629\n 9 Indonesia ets    2008 Sep    63730  74518. -10788. -0.145 \n10 Indonesia ets    2008 Oct    71206  67869.   3337.  0.0492\n# ℹ 1,310 more rows\n```\n\n\n:::\n:::\n\n\n\n### Comparing Fit Models\n\nIn the code chunk below, `accuracy()` is used to compare the performances of the models.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fit %>%\n  accuracy() %>%\n  arrange(Country)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 11\n   Country     .model .type       ME   RMSE   MAE     MPE   MAPE    MASE   RMSSE\n   <chr>       <chr>  <chr>    <dbl>  <dbl> <dbl>   <dbl>  <dbl>   <dbl>   <dbl>\n 1 Indonesia   ets    Trai… -1813.   13187. 9665.  -1.83    7.57   0.556   0.619\n 2 Indonesia   arima  Trai…   NaN      NaN   NaN  NaN     NaN    NaN     NaN    \n 3 Malaysia    ets    Trai…  -678.    4515. 3538.  -1.25    5.15   0.529   0.527\n 4 Malaysia    arima  Trai…   NaN      NaN   NaN  NaN     NaN    NaN     NaN    \n 5 Philippines ets    Trai…    -2.35  2298. 1897.  -0.334   4.64   0.464   0.408\n 6 Philippines arima  Trai…   NaN      NaN   NaN  NaN     NaN    NaN     NaN    \n 7 Thailand    ets    Trai…    19.7   2323. 1773.  -0.511   5.89   0.489   0.485\n 8 Thailand    arima  Trai…   NaN      NaN   NaN  NaN     NaN    NaN     NaN    \n 9 Vietnam     ets    Trai…   -35.2   1745. 1386.  -0.728   5.29   0.467   0.473\n10 Vietnam     arima  Trai…   NaN      NaN   NaN  NaN     NaN    NaN     NaN    \n# ℹ 1 more variable: ACF1 <dbl>\n```\n\n\n:::\n:::\n\n\n\n### Forecast Future Values\n\nForecasts from these models can be produced directly as our specified models do not require any additional data.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fc <- ASEAN_fit %>%\n  forecast(h = \"12 months\")\n```\n:::\n\n\n\n### Visualising the forecasted values\n\nIn the code chunk below `autoplot()` of feasts package is used to plot the raw and fitted values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nASEAN_fc %>%\n  autoplot(ASEAN)\n```\n\n::: {.cell-output-display}\n![](In-class_Ex07_files/figure-html/unnamed-chunk-58-1.png){width=768}\n:::\n:::\n\n\n\n## Reference\n\nRob J Hyndman and George Athanasopoulos (2022) [**Forecasting: Principles and Practice (3rd ed)**](https://otexts.com/fpp3/), online version.\n",
    "supporting": [
      "In-class_Ex07_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}