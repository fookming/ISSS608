---
title: "Hands-on Exercise 01"
author: "Ee Fook Ming"
format: html
output: 
  html_document: 
    toc: true
    tabset: true
---

# A Layered Grammar of Graphics: ggplot2 methods

## Install and launching R Packages.

The code chunk below uses pacman package to check if tidyverse is installed. If it is installed, it will be launched. Otherwise pacman will install the it automatically.

```{r}
pacman::p_load(tidyverse)

```

## Importing the Data

```{r}

exam_data <- read_csv('data/Exam_data.csv')

```


## Introduction to ggplot

ggplot is an R package for declaratively creating data-driven graphics based on The Grammar of Graphics. It is also part of the tidyverse family specially designed for visual exploration and communication.

For more detail, visit ggplot2 [link](https://ggplot2.tidyverse.org/).


### R Graphics VS ggplot

First, let us compare how R Graphics, the core graphical functions of Base R and ggplot plot a simple histogram.

::: panel-tabset
#### Base R Histogram
```{r}
# Base R histogram
hist(exam_data$MATHS,
     main = "Histogram of exam_data$MATHS",
     xlab = "exam_data$MATHS",
     col = "gray",
     border = "black")
```

#### ggplot
```{r}
# ggplot2 histogram
ggplot(exam_data, aes(x = MATHS)) +
  geom_histogram(binwidth = 5, fill = "gray", color = "black") +
  labs(title = "ggplot2: Histogram of exam_data$MATHS", x = "exam_data$MATHS", y = "Frequency")

```
:::


As you can see that the code chunk is relatively simple if R Graphics is used. Then, the question is why ggplot2 is recommended?

As pointed out by [Hadley Wickham](http://varianceexplained.org/r/teach_ggplot2_to_beginners/#comment-1745406157)


::: {.callout-important}
The transferable skills from ggplot2 are not the idiosyncrasies of plotting syntax, but a powerful way of thinking about visualisation, as a way of mapping between variables and the visual properties of geometric objects that you can perceive.
:::

## Grammar of Graphics

The Grammar of Graphics, introduced by Leland Wilkinson (1999), is a framework for data visualization that defines how to structure mathematical and aesthetic elements into meaningful graphs. It breaks graphs into semantic components like scales and layers and is based on two principles:

-   Graphics as layers of grammatical elements.
-   Creating meaningful plots through aesthetic mapping.

This approach helps to understand complex graphics, uncover unexpected connections, and establish a foundation for diverse visualizations. While it guides the creation of well-formed graphics, some grammatically correct visuals may still lack meaningful insights.

### A Layer Grammar Graphic

ggplot2 is an implementation of Leland Wilkinson's Grammar of Graphics, as detailed by Hadley Wickham (2010). It comprises seven key building blocks:

<!--
![Reference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.](/images/Layer-grammar-graphic.jpg){width="470"}
-->

![Reference: Hadley Wickham (2010) “A layered grammar of graphics.” Journal of Computational and Graphical Statistics, vol. 19, no. 1, pp. 3–28.](/images/Layer-grammar-graphic.jpg){width="470" style="border: 2px solid black; padding: 5px; border-radius: 5px;"}

-   Data: The dataset being visualized.
-   Aesthetics: Attributes of data mapped to visual properties like position, color, size, shape, or transparency.
-   Geometries: Visual elements representing data (e.g., points, bars, lines).
-   Facets: Subset the data to create multiple variations of the graph (paneling).
-   Statistics: Transformations summarizing data (e.g., mean, confidence intervals).
-   Coordinate Systems: Define the plane for mapping data on the graphic.
-   Themes: Adjust non-data components, such as titles, axes labels, and legend styles.

## Essential Grammatical Elements in ggplot2: [Aesthetic mappings](https://ggplot2.tidyverse.org/articles/ggplot2-specs.html)

Aesthetic mappings in ggplot2 link data attributes to visual characteristics like position, color, size, shape, or transparency, enabling the visualization to convey information. Aesthetics are specified using the [aes()](https://ggplot2.tidyverse.org/reference/aes.html) function, and each geom layer can have its own aes settings. This allows for flexible and informative plotting.

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS))
```

## Essential Grammatical Elements in ggplot2: geom

Geometric objects are the actual marks we put on a plot. Examples include:

-   geom_point for drawing individual points (e.g., a scatter plot)
-   geom_line for drawing lines (e.g., for a line charts)
-   geom_smooth for drawing smoothed lines (e.g., for simple trends or approximations)
-   geom_bar for drawing bars (e.g., for bar charts)
-   geom_histogram for drawing binned values (e.g. a histogram)
-   geom_polygon for drawing arbitrary shapes
-   geom_map for drawing polygons in the shape of a map! (You can access the data to use for these maps by using the map_data() function).

![Collection of Geometry Shapes](/images/geom_shapes.png){class="framed-image"}

-   A plot must have at least one geom; there is no upper limit. You can add a geom to a plot using the **+** operator.
-   For complete list, please refer to [here](https://ggplot2.tidyverse.org/reference/#section-layer-geoms).

### Geometric Objects: geom_bar

The code chunk below plots a bar chart by using [geom_bar()](https://ggplot2.tidyverse.org/reference/geom_bar.html).

```{r}

ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()

```

### Geometric Objects: geom_dotplot

In a dot plot, each dot represents one observation, and the dot's width corresponds to the bin width or maximum width (based on the binning algorithm). The [geom_dotplot()](https://ggplot2.tidyverse.org/reference/geom_dotplot.html) function in ggplot2 is used to create dot plots.


```{r}

ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(dotsize = 0.5)

```


::: {.callout-note}
The y scale is not very useful, in fact it is very misleading.
:::

::: {.callout-warning}
The code chunk below performs the following two steps:

  - scale_y_continuous() is used to turn off the y-axis, and
  - binwidth argument is used to change the binwidth to 2.5.
:::

```{r}

ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_dotplot(binwidth=2.5,         
               dotsize = 0.5) +      
  scale_y_continuous(NULL,           
                     breaks = NULL)  

```


### Geometric Objects: geom_histogram()

In the code chunk below, [geom_histogram()](https://ggplot2.tidyverse.org/reference/geom_histogram.html) is used to create a simple histogram by using values in MATHS field of exam_data.

```{r}

ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_histogram()       

```


### Modifying a geometric object by changing geom()

In the code chunk below,

  - bins argument is used to change the number of bins to 20,
  - fill argument is used to shade the histogram with light blue color, and
  - color argument is used to change the outline colour of the bars in black

```{r}

ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20,            
                 color="black",      
                 fill="light blue")  

```


### Modifying a geometric object by changing aes()

The code chunk below changes the interior colour of the histogram (i.e. fill) by using sub-group of aesthetic().

```{r}

ggplot(data=exam_data, 
       aes(x= MATHS, 
           fill = GENDER)) +
  geom_histogram(bins=20, 
                 color="grey30")

```

::: {.callout-note}
This approach can be used to colour, fill and alpha of the geometric.
:::


### Geometric Objects: geom-density()

[geom-density()](https://ggplot2.tidyverse.org/reference/geom_density.html) computes and plots [kernel density estimate](https://en.wikipedia.org/wiki/Kernel_density_estimation), which is a smoothed version of the histogram.

It is a useful alternative to the histogram for continuous data that comes from an underlying smooth distribution.

The code below plots the distribution of Maths scores in a kernel density estimate plot.


```{r}

ggplot(data=exam_data, 
       aes(x = MATHS)) +
  geom_density()           

```

The code chunk below plots two kernel density lines by using colour or fill arguments of aes()

```{r}

ggplot(data=exam_data, 
       aes(x = MATHS, 
           colour = GENDER)) +
  geom_density()


```


### Geometric Objects: geom_boxplot

[geom_boxplot()](https://ggplot2.tidyverse.org/reference/geom_boxplot.html) displays continuous value list. It visualises five summary statistics (the median, two hinges and two whiskers), and all “outlying” points individually.

The code chunk below plots boxplots by using [geom_boxplot()](https://ggplot2.tidyverse.org/reference/geom_boxplot.html).

```{r}

ggplot(data=exam_data, 
       aes(y = MATHS,       
           x= GENDER)) +    
  geom_boxplot()            

```

[Notches](https://sites.google.com/site/davidsstatistics/home/notched-box-plots) are used in box plots to help visually assess whether the medians of distributions differ. If the notches do not overlap, this is evidence that the medians are different.

The code chunk below plots the distribution of Maths scores by gender in notched plot instead of boxplot.

```{r}

ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot(notch=TRUE)

```


### Geometric Objects: geom_violin

[geom_violin](https://ggplot2.tidyverse.org/reference/geom_violin.html) is designed for creating violin plot. Violin plots are a way of comparing multiple data distributions. With ordinary density curves, it is difficult to compare more than just a few distributions because the lines visually interfere with each other. With a violin plot, it’s easier to compare several distributions since they’re placed side by side.

The code below plot the distribution of Maths score by gender in violin plot.


```{r}

ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_violin()

```


### Geometric Objects: geom_point()

[geom_point()](https://ggplot2.tidyverse.org/reference/geom_point.html) is especially useful for creating scatterplot.

The code chunk below plots a scatterplot showing the Maths and English grades of pupils by using geom_point().

```{r}
ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            
```



### geom objects can be combined

The code chunk below plots the data points on the boxplots by using both geom_boxplot() and geom_point().

```{r}

ggplot(data=exam_data, 
       aes(y = MATHS, 
           x= GENDER)) +
  geom_boxplot() +                    
  geom_point(position="jitter", 
             size = 0.5)        

```


## Essential Grammatical Elements in ggplot2: stat

The [Statistics functions](https://ggplot2.tidyverse.org/reference/#stats) statistically transform data, usually as some form of summary. For example:

- frequency of values of a variable (bar graph)
    - a mean
    - a confidence limit
- There are two ways to use these functions:
    - add a stat_() function and override the default geom, or
    - add a geom_() function and override the default stat.

```{r}
ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot()
```



### Working with stat - the stat_summary() method

The code chunk below adds mean values by using [stat_summary()](https://ggplot2.tidyverse.org/reference/stat_summary.html) function and overriding the default geom.

```{r}

ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  stat_summary(geom = "point",       
               fun = "mean",         
               colour ="red",        
               size=4)               

```


### Working with stat - the geom() method

The code chunk below adding mean values by using geom_() function and overriding the default stat.


```{r}

ggplot(data=exam_data, 
       aes(y = MATHS, x= GENDER)) +
  geom_boxplot() +
  geom_point(stat="summary",        
             fun="mean",           
             colour="red",          
             size=4)          

```


### Adding a best fit curve on a scatterplot?

The scatterplot below shows the relationship of Maths and English grades of pupils. The interpretability of this graph can be improved by adding a best fit curve.

```{r}
#| echo: false

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point()            

```


In the code chunk below, [geom_smooth()](https://ggplot2.tidyverse.org/reference/geom_smooth.html) is used to plot a best fit curve on the scatterplot.


```{r}

ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(size=0.5)

```



::: {.callout-note}
- The default method used is loess.
:::


The default smoothing method can be overridden as shown below.

```{r}

ggplot(data=exam_data, 
       aes(x= MATHS, 
           y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              linewidth=0.5)

```


## Essential Grammatical Elements in ggplot2: Facets

Facetting generates small multiples (sometimes also called trellis plot), each displaying a different subset of the data. They are an alternative to aesthetics for displaying additional discrete variables. ggplot2 supports two types of factes, namely: [facet_grid](https://ggplot2.tidyverse.org/reference/facet_grid.html) and [facet_wrap](https://ggplot2.tidyverse.org/reference/facet_wrap.html).


### 1.9.1 Working with facet_wrap()

[facet_wrap](https://ggplot2.tidyverse.org/reference/facet_wrap.html) wraps a 1d sequence of panels into 2d. This is generally a better use of screen space than facet_grid because most displays are roughly rectangular.

The code chunk below plots a trellis plot using facet-wrap().

```{r}

ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_wrap(~ CLASS)

```


### facet_grid() function

[facet_grid()]() forms a matrix of panels defined by row and column facetting variables. It is most useful when you have two discrete variables, and all combinations of the variables exist in the data.

The code chunk below plots a trellis plot using facet_grid().


```{r}

ggplot(data=exam_data, 
       aes(x= MATHS)) +
  geom_histogram(bins=20) +
    facet_grid(~ CLASS)

```



## Essential Grammatical Elements in ggplot2: Coordinates

The Coordinates functions map the position of objects onto the plane of the plot. There are a number of different possible coordinate systems to use, they are:

-   [`coord_cartesian()`](https://ggplot2.tidyverse.org/reference/coord_cartesian.html): the default cartesian coordinate systems, where you specify x and y values (e.g. allows you to zoom in or out).
-   [`coord_flip()`](https://ggplot2.tidyverse.org/reference/coord_flip.html): a cartesian system with the x and y flipped.
-   [`coord_fixed()`](https://ggplot2.tidyverse.org/reference/coord_fixed.html): a cartesian system with a "fixed" aspect ratio (e.g. 1.78 for a "widescreen" plot).
-   [`coord_quickmap()`](https://ggplot2.tidyverse.org/reference/coord_map.html): a coordinate system that approximates a good aspect ratio for maps.



### Working with Coordinate

By the default, the bar chart of ggplot2 is in vertical form.

```{r}

ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar()

```


The code chunk below flips the horizontal bar chart into vertical bar chart by using coord_flip().


```{r}

ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip()

```


### Changing the y- and x-axis range

The scatterplot on the right is slightly misleading because the y-aixs and x-axis range are not equal.


```{r}

ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, size=0.5)

```

The code chunk below fixed both the y-axis and x-axis range from 0-100.

```{r}

ggplot(data=exam_data, 
       aes(x= MATHS, y=ENGLISH)) +
  geom_point() +
  geom_smooth(method=lm, 
              size=0.5) +  
  coord_cartesian(xlim=c(0,100),
                  ylim=c(0,100))

```


## Essential Grammatical Elements in ggplot2: themes


Themes control elements of the graph not related to the data. For example:

- background colour
- size of fonts
- gridlines
- colour of labels

Built-in themes include: - theme_gray() (default) - theme_bw() - theme_classic()

A list of theme can be found at this [link](https://ggplot2.tidyverse.org/reference/ggtheme.html). Each theme element can be conceived of as either a line (e.g. x-axis), a rectangle (e.g. graph background), or text (e.g. axis title).


### Working with theme

The code chunk below plot a horizontal bar chart using theme_gray().

```{r}

ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_gray()

```


A horizontal bar chart plotted using theme_classic().

```{r}

ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_classic()

```


A horizontal bar chart plotted using theme_minimal().

```{r}

ggplot(data=exam_data, 
       aes(x=RACE)) +
  geom_bar() +
  coord_flip() +
  theme_minimal()

```


## Reference


- Hadley Wickham (2023) ggplot2: [Elegant Graphics for Data Analysis](https://ggplot2-book.org/). Online 3rd edition.
- Winston Chang (2013) [R Graphics Cookbook 2nd edition](https://r-graphics.org/). Online version.
- Healy, Kieran (2019) [Data Visualization: A practical introduction](https://socviz.co/). Online version
- [Learning ggplot2 on Paper – Components](https://henrywang.nl/learning-ggplot2-on-paper-components/)
- [Learning ggplot2 on Paper – Layer](https://henrywang.nl/learning-ggplot2-on-paper-layer/)
- [Learning ggplot2 on Paper – Scale](https://henrywang.nl/tag/learning-ggplot2-on-paper/)

